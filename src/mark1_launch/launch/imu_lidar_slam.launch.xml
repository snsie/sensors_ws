<?xml version="1.0"?>
<launch>
  <!-- Arguments -->
  <arg name="use_sim_time" default="false"/>
  <arg name="slam_params_file" default="$(find-pkg-share mark1_launch)/config/mapper_params_online_async.yaml"/>
  <arg name="imu_ekf_params_file" default="$(find-pkg-share mark1_launch)/config/ekf.yaml"/>
  
  <!-- Define path variables -->
  <let name="urdf_path" value="$(find-pkg-share mark1_description)/urdf/my_robot.urdf.xacro"/>
  
  <!-- Start robot_state_publisher -->
  <node pkg="robot_state_publisher" exec="robot_state_publisher" name="robot_state_publisher">
    <param name="robot_description" value="$(command 'xacro $(var urdf_path)')"/>
    <param name="publish_frequency" value="30.0"/>
    <param name="use_sim_time" value="$(var use_sim_time)"/>
  </node>

  <!-- Create a /scan topic from your lidar -->
  <node pkg="topic_tools" exec="relay" name="lidar_relay"
        args="/orbbec_lidar/orbbec_lidar/scan /scan" output="screen"/>
  
  <!-- IMU + Visual Odometry fusion using robot_localization -->
  <node pkg="robot_localization" exec="ekf_node" name="ekf_imu_node" output="screen">
    <param from="$(var imu_ekf_params_file)"/>
    <param name="use_sim_time" value="$(var use_sim_time)"/>
    <!-- Remap topics -->
    <remap from="odometry/filtered" to="/odometry/filtered"/>
    <remap from="/tf" to="/tf"/>
    <remap from="/tf_static" to="/tf_static"/>
  </node>

  <!-- SLAM Toolbox for 2D LiDAR mapping only -->
  <node pkg="slam_toolbox" exec="async_slam_toolbox_node" name="slam_toolbox" output="screen">
    <param from="$(find-pkg-share mark1_launch)/config/mapper_params_online_async.yaml"/>
    <param name="use_sim_time" value="$(var use_sim_time)"/>
    
    <!-- Remap topics -->
    <remap from="/scan" to="/scan"/>
    <remap from="/tf" to="/tf"/>
    <remap from="/tf_static" to="/tf_static"/>
  </node>

  <!-- RViz for visualization -->
  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen">
    <param name="use_sim_time" value="$(var use_sim_time)"/>
  </node>
  
  <!-- Debug tool for TF tree -->
  <node pkg="tf2_ros" exec="tf2_monitor" name="tf_monitor" output="screen"/>
</launch>